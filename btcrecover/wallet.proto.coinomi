/* This file is copied from the last open source version of Coinomi. Aside from this
 * introductory message, the rest remains unchanged from the original.
 * To generate wallet_pb2.py, run: protoc --python_out=. wallet.proto.bitcoinj
 */

/** Copyright 2013 Google Inc.
 *  Copyright 2014 Andreas Schildbach
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Authors: Jim Burton, Miron Cuperman, Andreas Schildbach, John L. Jegutanis
 */

/* Notes:
 * - Endianness: All byte arrays that represent numbers (such as hashes and private keys) are Big Endian
 * - To regenerate after editing, run: mvn generate-sources -DupdateProtobuf
 */

package com.coinomi.core.protos;

option java_package = "com.coinomi.core.protos";

option java_outer_classname = "Protos";

message PeerAddress {
    required bytes ip_address = 1;
    required uint32 port = 2;
    required uint64 services = 3;
}

message EncryptedData {
    required bytes initialisation_vector = 1; // The initialisation vector for the AES encryption (16 bytes)
    required bytes encrypted_private_key = 2; // The encrypted private key
}

/**
 * Data attached to a Key message that defines the data needed by the BIP32 deterministic key hierarchy algorithm.
 */
message DeterministicKey {
    // Random data that allows us to extend a key. Without this, we can't figure out the next key in the chain and
    // should just treat it as a regular ORIGINAL type key.
    required bytes chain_code = 1;

    // The path through the key tree. Each number is encoded in the standard form: high bit set for private derivation
    // and high bit unset for public derivation.
    repeated uint32 path = 2;

    // How many children of this key have been issued, that is, given to the user when they requested a fresh key?
    // For the parents of keys being handed out, this is always less than the true number of children: the difference is
    // called the lookahead zone. These keys are put into Bloom filters so we can spot transactions made by clones of
    // this wallet - for instance when restoring from backup or if the seed was shared between devices.
    //
    // If this field is missing it means we're not issuing subkeys of this key to users.
    optional uint32 issued_subkeys = 3;
    optional uint32 lookahead_size = 4;

    /**
     * Flag indicating that this key is a root of a following chain. This chain is following the next non-following chain.
     * Following/followed chains concept is used for married keychains, where the set of keys combined together to produce
     * a single P2SH multisignature address
     */
    optional bool isFollowing = 5;
}

/**
 * A key used to control Bitcoin spending.
 *
 * Either the private key, the public key or both may be present.  It is recommended that
 * if the private key is provided that the public key is provided too because deriving it is slow.
 *
 * If only the public key is provided, the key can only be used to watch the blockchain and verify
 * transactions, and not for spending.
 */
message Key {
    enum Type {
        /** Unencrypted - Original bitcoin secp256k1 curve */
        ORIGINAL = 1;

        /** Encrypted with Scrypt and AES - Original bitcoin secp256k1 curve */
        ENCRYPTED_SCRYPT_AES = 2;

        /**
        * Not really a key, but rather contains the mnemonic phrase for a deterministic key hierarchy in the private_key field.
        * The label and public_key fields are missing. Creation timestamp will exist.
        */
        DETERMINISTIC_MNEMONIC = 3;

        /**
         * A key that was derived deterministically. Note that the root seed that created it may NOT be present in the
         * wallet, for the case of watching wallets. A deterministic key may or may not have the private key bytes present.
         * However the public key bytes and the deterministic_key field are guaranteed to exist. In a wallet where there
         * is a path from this key up to a key that has (possibly encrypted) private bytes, it's expected that the private
         * key can be rederived on the fly.
         */
        DETERMINISTIC_KEY = 4;
    }
    required Type type = 1;

    // Either the private EC key bytes (without any ASN.1 wrapping), or the deterministic root seed.
    // If the secret is encrypted, or this is a "watching entry" then this is missing.
    optional bytes secret_bytes = 2;
    // If the secret data is encrypted, then secret_bytes is missing and this field is set.
    optional EncryptedData encrypted_data = 3;

    // The public EC key derived from the private key. We allow both to be stored to avoid mobile clients having to
    // do lots of slow EC math on startup. For DETERMINISTIC_MNEMONIC entries this is missing.
    optional bytes public_key = 4;

    // User-provided label associated with the key.
    optional string label = 5;

    optional DeterministicKey deterministic_key = 6;
}

message TransactionInput {
    // Hash of the transaction this input is using.
    required bytes transaction_out_point_hash = 1;
    // Index of transaction output used by this input.
    required uint32 transaction_out_point_index = 2;
    // Script that contains the signatures/pubkeys.
    required bytes script_bytes = 3;
    // Sequence number. Currently unused, but intended for contracts in future.
    optional uint32 sequence = 4;
    // Value of connected output, if known
    optional int64 value = 5;
}

message TransactionOutput {
    required int64 value = 1;
    required bytes script_bytes = 2; // script of transaction output
    // If spent, the hash of the transaction doing the spend.
    optional bytes spent_by_transaction_hash = 3;
    // If spent, the index of the transaction input of the transaction doing the spend.
    optional int32 spent_by_transaction_index = 4;
    // If the output is generally spent
    optional bool is_spent = 5 [default = false];
    // The index of this output, used in trimmed transactions
    optional int32 index = 6;
}

message UnspentOutput {
    // Hash of the transaction this input is using.
    required bytes out_point_hash = 1;
    // Index of transaction output used by this input.
    required uint32 out_point_index = 2;
    // Script of transaction output
    required bytes script_bytes = 3;
    // Value of theoutput
    required int64 value = 4;
    // If this output is from a coin base or coin stake transaction
    optional bool is_generated = 5 [default = false];
}

/**
 * A description of the confidence we have that a transaction cannot be reversed in the future.
 *
 * Parsing should be lenient, since this could change for different applications yet we should
 * maintain backward compatibility.
 */
message TransactionConfidence {
    enum Type {
        UNKNOWN = 0;
        BUILDING = 1; // In best chain.  If and only if appeared_at_height is present.
        PENDING = 2; // Unconfirmed and sitting in the networks memory pools, waiting to be included in the chain.
        DEAD = 3; // Either if overriding_transaction is present or transaction is dead coinbase
    }

    // This is optional in case we add confidence types to prevent parse errors - backwards compatible.
    optional Type type = 1;

    // If type == BUILDING then this is the chain height at which the transaction was included.
    optional int32 appeared_at_height = 2;

    // If set, hash of the transaction that double spent this one into oblivion. A transaction can be double spent by
    // multiple transactions in the case of several inputs being re-spent by several transactions but we don't
    // bother to track them all, just the first. This only makes sense if type = DEAD.
    optional bytes overriding_transaction = 3;

    // If type == BUILDING then this is the depth of the transaction in the blockchain.
    // Zero confirmations: depth = 0, one confirmation: depth = 1 etc.
    optional int32 depth = 4;

    repeated PeerAddress broadcast_by = 5;

    // Where did we get this transaction from? Knowing the source may help us to risk analyze pending transactions.
    enum Source {
        SOURCE_UNKNOWN = 0; // We don't know where it came from, or this is a wallet from the future.
        SOURCE_NETWORK = 1; // We received it from a network broadcast. This is the normal way to get payments.
        SOURCE_SELF = 2; // We made it ourselves, so we know it should be valid.
        SOURCE_TRUSTED = 3; // We received it from a trusted source.
    }
    optional Source source = 6;
}

/** A bitcoin transaction */

message Transaction {
    /**
     * This is a bitfield oriented enum, with the following bits:
     *
     * bit 0 - spent
     * bit 1 - appears in alt chain
     * bit 2 - appears in best chain
     * bit 3 - double-spent
     * bit 4 - pending (we would like the tx to go into the best chain)
     *
     * Not all combinations are interesting, just the ones actually used in the enum.
     */
    enum Pool {
        UNSPENT = 4; // In best chain, not all outputs spent
        SPENT = 5; // In best chain, all outputs spent
        DEAD = 10; // Double-spent by a transaction in the best chain
        PENDING = 16; // Our transaction, not in any chain
    }

    // See Wallet.java for detailed description of pool semantics
    required int32 version = 1;
    optional int32 time = 11; // Used by Peercoin family
    required bytes hash = 2;

    // If pool is not present, that means either:
    //  - This Transaction is either not in a wallet at all (the proto is re-used elsewhere)
    //  - Or it is stored but for other purposes, for example, because it is the overriding transaction of a double spend.
    //  - Or the Pool enum got a new value which your software is too old to parse.
    optional Pool pool = 3;

    optional uint32 lock_time = 4; // The nLockTime field is useful for contracts.
    optional int64 updated_at = 5; // millis since epoch the transaction was last updated

    repeated TransactionInput transaction_input = 6;
    optional int32 num_of_outputs = 18; // The original number of outputs, used in trimmed transactions
    repeated TransactionOutput transaction_output = 7;

    // A list of blocks in which the transaction has been observed (on any chain). Also, a number used to disambiguate
    // ordering within a block.
    repeated bytes block_hash = 8;
    repeated int32 block_relativity_offsets = 9;

    // Data describing where the transaction is in the chain.
    optional TransactionConfidence confidence = 10;

    optional int32 token_id = 12;

    optional bytes extra_bytes = 13;

    // A transaction can be stored in a trimmed state where some inputs or outputs are stripped to save space.
    optional bool is_trimmed = 14 [default = false];

    // The value that the wallet sends, it is the sum of the inputs that are spending coins with keys in the wallet.
    optional int64 value_sent = 15 [default = 0];
    // The value that the wallet received, it is the sum of the outputs that are sending coins to a key in the wallet.
    optional int64 value_received = 16 [default = 0];
    // The transaction fee
    optional int64 fee = 17;

    // Next tag: 19
}

message AddressStatus {
    required string address = 1; // The address that the wallet watches
    required string status = 2; // The address status
}

/** A wallet pocket*/
message WalletPocket {
    required string network_identifier = 1; // the network used by this wallet

    // A UTF8 encoded text description of the wallet that is intended for end user provided text.
    optional string description = 2;

    repeated Key key = 3;

    // The SHA256 hash of the head of the best chain seen by this wallet.
    optional bytes last_seen_block_hash = 4;
    // The height in the chain of the last seen block.
    optional uint32 last_seen_block_height = 5;
    optional int64 last_seen_block_time_secs = 6;

    repeated Transaction transaction = 7;

    repeated AddressStatus address_status = 8;

    optional string id = 9;

    repeated UnspentOutput unspent_output = 10;

    // Next tag: 11
}

/** The parameters used in the scrypt key derivation function.
 *  The default values are taken from http://www.tarsnap.com/scrypt/scrypt-slides.pdf.
 *  They can be increased - n is the number of iterations performed and
 *  r and p can be used to tweak the algorithm - see:
 *  http://stackoverflow.com/questions/11126315/what-are-optimal-scrypt-work-factors
 */
message ScryptParameters {
    required bytes salt = 1; // Salt to use in generation of the wallet password (8 bytes)
    optional int64 n = 2 [default = 16384]; // CPU/ memory cost parameter
    optional int32 r = 3 [default = 8]; // Block size parameter
    optional int32 p = 4 [default = 1]; // Parallelisation parameter
}

/** A bitcoin wallet */
message Wallet {
    /**
     * The encryption type of the wallet.
     *
     * The encryption type is UNENCRYPTED for wallets where the wallet does not support encryption - wallets prior to
     * encryption support are grandfathered in as this wallet type.
     * When a wallet is ENCRYPTED_SCRYPT_AES the keys are either encrypted with the wallet password or are unencrypted.
     */
    enum EncryptionType {
        UNENCRYPTED = 1; // All keys in the wallet are unencrypted
        ENCRYPTED_SCRYPT_AES = 2; // All keys are encrypted with a passphrase based KDF of scrypt and AES encryption
        ENCRYPTED_AES = 3; // All keys are encrypted with AES encryption
    }

    // The version number of the wallet - used to detect wallets that were produced in the future
    // (i.e the wallet may contain some future format this protobuf/ code does not know about)
    optional int32 version = 1 [default = 1];

    optional Key seed = 2;
    optional bool seed_password_protected = 7;

    required Key master_key = 3;

    optional EncryptionType encryption_type = 4 [default = UNENCRYPTED];
    optional ScryptParameters encryption_parameters = 5;

    repeated WalletPocket pockets = 6;

    // Next tag: 8
}
